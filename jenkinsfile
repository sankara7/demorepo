node {
    def GITHUB_REPO_URL= "https://github.com/sankara7/demorepo"
    def GITLAB_BRANCH="dev"
    def VELOCITY_APP_NAME="DEM_build"
    def GIT_COMMIT
    def SONARSCANNER_HOME = tool 'sonar-scanner-3.2.0.1227'
	def SONARSERVER= "SonarQube"
    def MAVEN_HOME =  tool name: 'Maven', type: 'maven'
    def JAVA_HOME = tool name: 'JDK_8'

    stage ('cloning the repository'){        
       currentBuild.displayName = "1.1.0.${BUILD_NUMBER}"
       majorVersion="${BUILD_NUMBER}"
       url : "${GITHUB_REPO_URL}"
       GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
       echo "GIT_COMMIT=${GIT_COMMIT}"
    }
     stage ("Build") {
         echo "Building ${VELOCITY_APP_NAME} (Build:${currentBuild.displayName}, GIT_COMMIT:${GIT_COMMIT})"
         step($class: 'UploadBuild', 
            tenantId: "5ade13625558f2c6688d15ce",
            revision: "${GIT_COMMIT}",
            appName: "${VELOCITY_APP_NAME}",
            versionName:"${currentBuild.displayName}",
            requestor: "admin", id: "${currentBuild.displayName}"
         )
    }
    stage('Static Code Analysis') {
        withSonarQubeEnv("$SONARSERVER") {
                sh "${SONARSCANNER_HOME}/bin/sonar-scanner -e -X -Dsonar.projectName=$JOB_NAME -Dsonar.modules=gameoflife-web,gameoflife-core -Dsonar.junit.reportsPath=/target/surefire-reports -Dsonar.sources=src/main -Dsonar.java.binaries=target/classes -Dsonar.jacoco.reportPath=target/jacoco.exec -Dsonar.projectKey=$JOB_NAME"
		}
    }	
    stage('SonarQuality Gate') {
            timeout(time: 1, unit: 'HOURS') { 
            def qg = waitForQualityGate() 
            if (qg.status != 'OK') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
           }
	    }
	}
    stage('Code Coverage Gate') {
            jacoco buildOverBuild: true, 
            changeBuildStatus: true, 
            classPattern: '**/target/classes',
            deltaInstructionCoverage: '10',
            deltaComplexityCoverage: '10',
            deltaClassCoverage: '10',
            deltaBranchCoverage: '10',
            deltaMethodCoverage: '10',
            deltaLineCoverage: '10', 
            execPattern: '**/target/**.exec', 
            maximumBranchCoverage: '95', 
            maximumClassCoverage: '95', 
            maximumComplexityCoverage: '95', 
            maximumInstructionCoverage: '95', 
            maximumLineCoverage: '95', 
            maximumMethodCoverage: '95', 
            minimumBranchCoverage: '90', 
            minimumClassCoverage: '90', 
            minimumComplexityCoverage: '90', 
            minimumInstructionCoverage: '90', 
            minimumLineCoverage: '90', 
            minimumMethodCoverage: '90', 
            sourcePattern: '**/src/main/java/**'
    }
} 
